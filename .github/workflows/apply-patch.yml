name: apply-patch-url
on:
  workflow_dispatch:
    inputs:
      patch_url:
        description: "URL RAW del diff (Gist u otro)"
        required: true
        type: string
      sha256:
        description: "SHA256 esperado del diff (opcional)"
        required: false
        type: string
      commit_direct:
        description: "Hacer push directo a la rama por defecto"
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detectar rama por defecto
        id: def
        shell: bash
        run: |
          set -euo pipefail
          DEF=$(git remote show origin | sed -n 's/^\s*HEAD branch: //p')
          if [ -z "${DEF:-}" ]; then
            git remote set-head origin -a || true
            DEF=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's#^origin/##')
          fi
          echo "def=${DEF:-main}" >> "$GITHUB_OUTPUT"

      - name: Descargar diff
        id: get
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${{ github.event.inputs.patch_url }}" -o /tmp/patch.diff
          # normalizar fin de línea del propio parche
          sed -i 's/\r$//' /tmp/patch.diff
          # verificar sha256 si se aporta
          if [ -n "${{ github.event.inputs.sha256 }}" ]; then
            echo "${{ github.event.inputs.sha256 }}  /tmp/patch.diff" | sha256sum -c -
          fi
          head -n 20 /tmp/patch.diff || true

      - name: Preflight y normalización
        id: prep
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          # extraer rutas tocadas por el diff
          grep -E '^diff --git a/' /tmp/patch.diff | awk '{print $3"\n"$4}' \
            | sed -E 's#^[ab]/##' | sed 's#^/+##' | sort -u > /tmp/targets.txt || true

          # normalizar archivos existentes: BOM, CRLF→LF, salto de línea final
          while IFS= read -r f; do
            [ -f "$f" ] || continue
            perl -i -pe 'BEGIN{binmode(STDIN);binmode(STDOUT)} s/^\xEF\xBB\xBF//;' "$f" || true
            sed -i 's/\r$//' "$f" || true
            tail -c1 "$f" | od -An -t x1 | grep -qi '0a' || echo >> "$f"
          done < /tmp/targets.txt

          # preflight estricto
          if git apply --check /tmp/patch.diff 2> /tmp/preflight1.err; then
            echo "mode=strict" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # preflight tolerante a espacios/EOF
          if git apply --check --ignore-space-change --inaccurate-eof /tmp/patch.diff 2> /tmp/preflight2.err; then
            echo "mode=loose" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "== preflight estricto ==" >> /tmp/debug.txt
          cat /tmp/preflight1.err >> /tmp/debug.txt || true
          echo "== preflight tolerante ==" >> /tmp/debug.txt
          cat /tmp/preflight2.err >> /tmp/debug.txt || true
          echo "== primeras 200 líneas del diff ==" >> /tmp/debug.txt
          sed -n '1,200p' /tmp/patch.diff >> /tmp/debug.txt || true
          exit 1

      - name: Artifact de depuración
        if: steps.prep.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: patch-debug-${{ github.run_id }}
          path: |
            /tmp/patch.diff
            /tmp/preflight1.err
            /tmp/preflight2.err
            /tmp/debug.txt
          if-no-files-found: ignore

      - name: Cortar si preflight falló
        if: steps.prep.outcome != 'success'
        shell: bash
        run: exit 1

      - name: Aplicar diff (multi-intento)
        shell: bash
        run: |
          set -euo pipefail
          # Intento 1: git apply normal
          git apply --index --whitespace=fix --inaccurate-eof /tmp/patch.diff || \
          # Intento 2: git apply tolerante a espacios
          git apply --index --whitespace=fix --inaccurate-eof --ignore-space-change /tmp/patch.diff || \
          # Intento 3: fallback con 'patch' con fuzz y luego indexar
          { command -v patch >/dev/null && patch -p1 --binary -t -l -N --fuzz=3 < /tmp/patch.diff && git add -A; } || {
            echo "No se pudo aplicar el diff ni con fallback"; exit 1;
          }

      - name: ¿Hubo cambios?
        id: changes
        shell: bash
        run: |
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Sin cambios
        if: steps.changes.outputs.changed != 'true'
        shell: bash
        run: echo "Diff no produjo cambios."

      - name: Crear PR
        if: steps.changes.outputs.changed == 'true' && github.event.inputs.commit_direct != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          title: "hope: apply patch"
          body: |
            Fuente: ${{ github.event.inputs.patch_url }}
            SHA256: ${{ github.event.inputs.sha256 || 'n/a' }}
          branch: hope/apply-${{ github.run_id }}
          base: ${{ steps.def.outputs.def }}
          commit-message: "hope: apply patch"
          delete-branch: true

      - name: Autor del commit (push directo)
        if: steps.changes.outputs.changed == 'true' && github.event.inputs.commit_direct == 'true'
        shell: bash
        run: |
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Commit y push directo
        if: steps.changes.outputs.changed == 'true' && github.event.inputs.commit_direct == 'true'
        env:
          PUSH_TOKEN: ${{ secrets.PAT_PUSH || github.token }}
        shell: bash
        run: |
          git commit -m "hope: apply patch"
          git push "https://${PUSH_TOKEN}@github.com/${{ github.repository }}.git" HEAD:${{ steps.def.outputs.def }}
